// Monitor gamma (typically 2.2 for CRT and 1.7 for LCD).
// Default: 2.2
//
// The lower the value, the brighter the dark places are, which is useful in the gameplay:
// 1.6: Highest brightness.
// |
// 2.6: Lowest brightness.
mat_monitorgamma "1.6"

// TV mode (off-set light).
// Default: 0
mat_monitorgamma_tv_enabled "0"

// Power saving mode (brightness).
// Default: 0
//
// The game intentionally will runs at a lower frame rate, in order to preserve battery power, extending the amount of time to play on battery power.
mat_powersavingsmode "0"

// Queue/thread mode the material system should use. 
// Default: -1
//
// >> Multicore rendering allows CS:GO to utilize the multiple CPUs present in the system.
// <!> Value '2' can cause the game to crash in some explicit cases.
// <*> For good CPUs, with more cores/threads, the multi-threaded setting provides a higher frame rate (use '2').
// <*> For bad CPUs, without multiple cores/threads, do not force a multithreaded mode (use '-1').
//
// The multicore rendering values:
// -1: Auto detection.
//  0: Synchronous single thread.
//  1: Queued single thread.
//  2: Queued multi-threaded.
mat_queue_mode "2"

// Controls if the JF_QUEUE flag is set.
// Default: 1
//
// <*> It only works when when multicore rendering is enabled.
// <!> Setting to value '0' might have undesirable consequences.
mat_queue_priority "1"

// Report thread stalls. 
// Default: 0
//
// <*> Values:
// Positive number will filter by stalls '>=' time in ms. 
// '-1' reports all locks.
mat_queue_report "0"

// Frame rate limiter.
// Default: 300
//
// The primary benefit of an frame rate cap is to make the frame rate more stable. A moderate, 
// consistent framerate is much more desirable than a variable but sometimes high framerate. 
// Frames generated, higher than the monitor refresh rate are still useful, providing a more stable gameplay.
//
// <!> The value '0' may produce a possible memory leak.
// <!> Should be set to an equal or higher value than `cl_cmdrate'.
// <*> A higher value can increase the smoothness but in same time can eat more power.
fps_max "300"

// Frame rate limiter, for main menu.
// Default: 120
//
// <*> Same as 'fps_max' but works only for the main menu.
fps_max_menu "120"

// Enables dynamic lighting, including flashbangs and weapon muzzle flash.
// Default: 1
//
// <*> The value '1' will give an in-game advantage like seeing the flash and muzzle reflected on the walls. However, value '0' can improve the frames rate.
r_dynamic "1"

// Toggles the visibility of first person weapon tracers, like bullets.
// Default: 1
//
// <*> Can help by seeing where the bullets go in order to adjust the spray.
r_drawtracers_firstperson "1"

// Mainly cosmetic, client-only effect: when client doesn't know the last position of another player that spawns a ragdoll, the ragdoll spawns around him.
// Default: 4
//
// <*> When the value of this command is lower, then the game will try to predict ragdoll better (using latest informations about player position and velocity). 
// <*> If the game don't have fast updates from server, the ragdoll will just fall strait down. 
// <*> If set to value '0', there will be no prediction.
cl_ragdoll_workaround_threshold "0"

// Controls the amount of time the engine sleeps per frame when the game is not in focus.
// Default: 50
//
// Don't limit the frame rate when the engine is not focused, the focus detection can be buggy on some systems, or while streaming may limit the frame rate.
// <*> The higher the value is, the more CPU load is reduced but there will be frame rate drops when tabbing and sound distortions if 'snd_mute_losefocus 0'.
// <*> The higher is the value, the more it can save the power while alt-tabbed out of the game.
engine_no_focus_sleep "25"